#include <boost/container/flat_map.hpp>
#include <boost/preprocessor/seq/for_each.hpp>

#include <dpay/manifest/plugins.hpp>

namespace dpay { namespace plugin {

{% for plugin in plugins %}
std::shared_ptr< dpay::app::abstract_plugin > create_{{ plugin["plugin_name"] }}_plugin( dpay::app::application* app );
{% endfor %}

boost::container::flat_map< std::string, std::function< std::shared_ptr< dpay::app::abstract_plugin >( dpay::app::application* app ) > > plugin_factories_by_name;

void initialize_plugin_factories()
{
   {% for plugin in plugins %}
   plugin_factories_by_name[ "{{ plugin["plugin_name"] }}" ] = []( dpay::app::application* app ) -> std::shared_ptr< dpay::app::abstract_plugin >
   {
      return create_{{ plugin["plugin_name"] }}_plugin( app );
   };
   {% endfor %}
}

std::shared_ptr< dpay::app::abstract_plugin > create_plugin( const std::string& name, dpay::app::application* app )
{
   auto it = plugin_factories_by_name.find( name );
   if( it == plugin_factories_by_name.end() )
      return std::shared_ptr< dpay::app::abstract_plugin >();
   return it->second( app );
}

std::vector< std::string > get_available_plugins()
{
   std::vector< std::string > result;
   for( const auto& e : plugin_factories_by_name )
      result.push_back( e.first );
   return result;
}

} }
